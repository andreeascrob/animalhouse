openapi: 3.0.3
info:
  title: Animal House
  description: Progetto di Tecnologie Web
  version: 1.0.0
servers:
  - url: http://localhost:8000/api/
  - url: https://site212210.tw.cs.unibo.it/api/
paths:
  /animals:
    post:
      summary: Creates an animal.
      tags:
        - store
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Animal'
      responses:
        '201':
          description: Created.
        '400':
          description: Error.
    get:
      summary: Returns the list of animals.
      tags:
        - store
      responses:
        '200':
          description: A JSON array of animals.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Animal'
  /animals/{animalSlug}:
    get:
      summary: Returns an animal by slug.
      tags:
        - store
      parameters:
        - name: animalSlug
          in: path
          required: true
          description: The slug of the animal.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Animal'
        '404':
          description: Animal non found.
  /categories:
    post:
      summary: Creates a category.
      tags:
        - store
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCategory'
      responses:
        '201':
          description: Created.
        '400':
          description: Error.
    get:
      summary: Returns the list of categories.
      tags:
        - store
      responses:
        '200':
          description: A JSON array of product categories.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductCategory'
  /categories/{productCategorySlug}:
    get:
      summary: Returns a product category by slug.
      tags:
        - store
      parameters:
        - name: productCategorySlug
          in: path
          required: true
          description: The slug of the product category.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategory'
        '404':
          description: Product non found.
    delete:
      summary: Deletes a product by slug.
      tags:
        - store
      parameters:
        - name: productCategorySlug
          in: path
          required: true
          description: The slug of the product category.
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Error.
  /products:
    post:
      summary: Creates a product.
      tags:
        - store
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Created.
        '400':
          description: Error.
    get:
      summary: Returns the list of products.
      tags:
      - store
      parameters:
        - in: query
          name: animalId
          schema:
            type: string
          description: Filter products by animal.
        - in: query
          name: animalSlug
          schema:
            type: string
          description: Filter products by animal (has priority over animalId).
        - in: query
          name: categoryId
          schema:
            type: string
          description: Filter products by category.
      responses:
        '200':
          description: A JSON array of products.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
  /products/{productSlug}:
    get:
      summary: Returns a product by slug.
      tags:
        - store
      parameters:
        - name: productSlug
          in: path
          required: true
          description: The slug of the product.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product non found.
    delete:
      summary: Deletes a product by slug.
      tags:
        - store
      parameters:
        - name: productSlug
          in: path
          required: true
          description: The slug of the product.
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Error.
  /order:
    post:
      summary: Creates an order.
      tags:
        - store
      security:
        - {} # Optional auth
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderPost'
      responses:
        '201':
          description: Created.
        '400':
          description: Error.
  /scores/{game}:
    get:
      summary: Returns a leaderboard by ID.
      tags:
        - game
      parameters:
        - name: game
          in: path
          required: true
          description: Name of the game.
          schema:
            type: string
            minimum: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Score'
        '400':
          description: Error.
  /topics:
    post:
      summary: Creates a topic.
      tags:
        - community
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopicPost'
      responses:
        '201':
          description: Created.
        '400':
          description: Error.
    get:
      summary: Returns the list of topics.
      tags:
      - community
      parameters:
        - in: query
          name: animalSlug
          required: true
          schema:
            type: string
          description: Filter topics by animal.
        - in: query
          name: board
          required: true
          schema:
            type: string
          description: Filter topics by boards.
      responses:
        '200':
          description: A JSON array of topics.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topic'
  /topics/{id}:
    get:
      summary: Returns a product by slug.
      tags:
        - community
      parameters:
        - name: id
          in: path
          required: true
          description: The _id of the topic.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
        '404':
          description: Topic non found.
    delete:
      summary: Deletes a topic by id.
      tags:
        - community
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The _id of the topic.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  animalSlug:
                    type: string
        '400':
          description: Error.
        '403':
          description: Only the author can delete a topic
  /topics/{id}/comment:
    post:
      summary: Adds a comment to a topic.
      tags:
        - community
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The _id of the topic.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
              schema:
                type: object
                properties:
                  text:
                    type: string
      responses:
        '201':
          description: Added
        '400':
          description: Error.
  /topics/{id}/comment/{commentId}:
    delete:
      summary: Deletes a comment by id.
      tags:
        - community
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: The _id of the topic.
          schema:
            type: string
        - name: commentId
          in: path
          required: true
          description: The _id of the comment.
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Error.
        '403':
          description: Only the author can delete a comment
  /users/signup:
    post:
      summary: Creates an user.
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Created.
        '400':
          description: Error.
  /users/signin:
    post:
      summary: Sign in an user.
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: The JWT token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '400':
          description: Error.
  /users/info/{id}:
    get:
      summary: Public info about an user.
      tags:
        - user
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the user.
          schema:
            type: string
      responses:
        '200':
          description: The public info about the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUser'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /users/profile:
    get:
      summary: Get profile of the logged user.
      tags:
        - user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: The complete profile of the logged user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  schemas:
    Animal:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        slug:
          type: string
      required:
        - name
        - slug
    Comment:
      type: object
      properties:
        _id:
          type: string
        text:
          type: string
        authorId:
          type: integer
      required:
        - id
        - text
        - authorId
    Product:
      type: object
      properties:
        name:
          type: string
        slug:
          type: string
        animalId:
          type: string
        categoryId:
          type: string
        imageUrl:
          type: string
          format: uri
        description:
          type: string
        price:
          type: number
          format: float
        available:
          type: array
          items:
            type: integer
      required:
        - name
        - slug
        - price
    ProductCategory:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        slug:
          type: string
        imageUrl:
          type: string
          format: uri
        description:
          type: string
      required:
        - name
        - slug
    OrderPost:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        surname:
          type: string
        email:
          type: string
        address:
          type: string
        city:
          type: string
        cart:
          type: array
          items:
            type: object # An object { 'slug': quantity, ... }
      required:
        - name
        - surname
        - email
        - address
        - city
        - cart
    Order:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        surname:
          type: string
        email:
          type: string
        address:
          type: string
        city:
          type: string
        cart:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              slug:
                type: string
              quantity:
                type: integer
              price:
                type: number
                format: float
            required:
              - slug
              - quantity
              - price
      required:
        - name
        - surname
        - email
        - address
        - city
        - cart
    Score:
      type: object
      properties:
        game:
          type: string
        player:
          type: string
        score:
          type: integer
      required:
        - game
        - player
        - score
    Topic:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        authorId:
          type: string
        animalId:
          type: string
        board:
          type: string
        text:
          type: string
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
      required:
        - title
        - authorId
        - animalId
        - board
        - text
    TopicPost:
      type: object
      properties:
        title:
          type: string
        animalSlug:
          type: string
        board:
          type: string
        text:
          type: string
      required:
        - title
        - animalSlug
        - board
        - text
    Board:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        slug:
          type: string
        description:
          type: string
      required:
        - title
        - slug
    User:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        surname:
          type: string
        email:
          type: string
        password:
          type: string
          format: password
        address:
          type: string
        city:
          type: string
      required:
        - email
        - password
    PublicUser:
      type: object
      properties:
        name:
          type: string
        surname:
          type: string
      required:
        - name
        - surname