openapi: 3.0.3
info:
  title: Animal House
  description: Progetto di Tecnologie Web
  version: 1.0.0
servers:
  - url: http://localhost:8000/api/
  - url: https://site212210.tw.cs.unibo.it/api/
paths:
  /animals:
    post:
      summary: Creates an animal.
      tags:
        - store
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Animal'
      responses:
        '201':
          description: Created.
        '400':
          description: Error.
    get:
      summary: Returns the list of animals.
      tags:
        - store
      responses:
        '200':
          description: A JSON array of animals.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Animal'
  /categories:
    post:
      summary: Creates a category.
      tags:
        - store
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCategory'
      responses:
        '201':
          description: Created.
        '400':
          description: Error.
    get:
      summary: Returns the list of categories.
      tags:
        - store
      responses:
        '200':
          description: A JSON array of product categories.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductCategory'
  /categories/{productCategorySlug}:
    get:
      summary: Returns a product category by slug.
      tags:
        - store
      parameters:
        - name: productCategorySlug
          in: path
          required: true
          description: The slug of the product category.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategory'
        '404':
          description: Product non found.
    delete:
      summary: Deletes a product by slug.
      tags:
        - store
      parameters:
        - name: productCategorySlug
          in: path
          required: true
          description: The slug of the product category.
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Error.
  /products:
    post:
      summary: Creates a product.
      tags:
        - store
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Created.
        '400':
          description: Error.
    get:
      summary: Returns the list of products.
      tags:
      - store
      parameters:
        - in: query
          name: categoryId
          schema:
            type: integer
          description: Filter products by category.
        - in: query
          name: animalId
          schema:
            type: integer
          description: Filter products by animal.
      responses:
        '200':
          description: A JSON array of products.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
  /products/{productSlug}:
    get:
      summary: Returns a product by slug.
      tags:
        - store
      parameters:
        - name: productSlug
          in: path
          required: true
          description: The slug of the product.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product non found.
    delete:
      summary: Deletes a product by slug.
      tags:
        - store
      parameters:
        - name: productSlug
          in: path
          required: true
          description: The slug of the product.
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Error.
  /scores/{game}:
    get:
      summary: Returns a leaderboard by ID.
      tags:
        - game
      parameters:
        - name: game
          in: path
          required: true
          description: Name of the game.
          schema:
            type: string
            minimum: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Score'
        '400':
          description: Error.
components:
  schemas:
    Animal:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        slug:
          type: string
      required:
        - name
        - slug
    Product:
      type: object
      properties:
        name:
          type: string
        slug:
          type: string
        animalId:
          type: string
        categoryId:
          type: string
        imageUrl:
          type: string
          format: uri
        description:
          type: string
        price:
          type: number
          format: float
        available:
          type: array
          items:
            type: integer
      required:
        - name
        - slug
        - price
    ProductCategory:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        slug:
          type: string
        imageUrl:
          type: string
          format: uri
        description:
          type: string
      required:
        - name
        - slug
    Score:
      type: object
      properties:
        game:
          type: string
        player:
          type: string
        score:
          type: integer
      required:
        - game
        - player
        - score
    Comment:
      type: object
      properties:
        id:
          type: string
        text:
          type: string
        authorId:
          type: integer
      required:
        - id
        - text
        - authorId
    Topic:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        slug:
          type: string
        authorId:
          type: integer
        boardId:
          type: string
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
      required:
        - title
        - slug
        - authorId
    Board:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        slug:
          type: string
        description:
          type: string
      required:
        - title
        - slug
